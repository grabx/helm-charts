


kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "mlogistics.fullname" . }}-{{ .Values.loasfrontend.name }}-cm
  namespace: {{ .Release.Namespace | quote }}
data:
  mlogistics: |
    #!/bin/bash
    # Control script for mLogistics
    cd "$(dirname $(readlink -f $0))" || exit 1
    unset JDK_JAVA_OPTIONS
    source ./mlog.conf || exit 1
    if [ -z "${HOSTNAME}" ]; then
      HOSTNAME=$(hostname)
    fi
    CLI="${LOAS_HOME}/.cli"
    SYSTEM="$(uname -s)"
    if [ "${SYSTEM:0:6}" = "CYGWIN" ]; then
      SYSTEM="CYGWIN"
    fi
    PSVER="$(ps -V)"
    NETSTAT="$(which ss 2>/dev/null)"
    if [ -z "${NETSTAT}" ]; then
      NETSTAT="$(which netstat)"
    fi
    USER="$(whoami)"

    INSTID="0"

    if [ -d "${SHARED}/log" ]; then 
      # deprecated
      LOG="${SHARED}/log/server.log"
      if [ -d "../../local/log" ]; then
        echo "Please fix: there is both shared/log and local/log. Looking only at shared/log now." >&2
        echo "No idea if this is what you want." >&2
      fi
    else
      LOG="../../local/log/server.log"
    fi
    VMLOG="../../local/log/vm-${HOSTNAME}-${INSTID}.log"
    LOGLOG="../../local/log/logserver.log"



    # checks for sufficient memory
    # to avoid OOM and swapping



    # checks for sufficient ulimits
    checklimits() {
      if [ "${SYSTEM}" = "CYGWIN" ]; then
        return;
      fi
      # open files/sockets
      ulimit -n 4096 2>/dev/null
      if [[ "$(ulimit -Sn)" != "unlimited" && $(ulimit -Sn) -lt 2048 ]]; then
        echo "WARNING: max open files/sockets soft limit is below 2048. Recommended: 4096" >&2
      fi
      if [[ "$(ulimit -Hn)" != "unlimited" && $(ulimit -Hn) -lt 4096 ]]; then
        echo "WARNING: max open files/sockets hard limit is below 4096. Recommended: 65536" >&2
      fi

      # user processes/threads
      ulimit -u 8192 2>/dev/null
      if [[ "$(ulimit -Su)" != "unlimited" && $(ulimit -Su) -lt 512 ]]; then
        echo "WARNING: max user processes soft limit is below 512. Recommended: 8192" >&2
      fi
      if [[ "$(ulimit -Hu)" != "unlimited" && $(ulimit -Hu) -lt 1024 ]]; then
        echo "WARNING: max user processes hard limit is below 1024. Recommended: 16341" >&2
      fi

      # stack size
      ulimit -s 10240 2>/dev/null
      if [[ "$(ulimit -Ss)" != "unlimited" && $(ulimit -Ss) -lt 512 ]]; then
        echo "WARNING: max stack size soft limit is below 512. Recommended: 10240" >&2
      fi
      if [[ "$(ulimit -Hs)" != "unlimited" && $(ulimit -Hs) -lt 512 ]]; then
        echo "WARNING: max stack size hard limit is below 512. Recommended: 10240" >&2
      fi
    }



    testSSL() {
      export JAVA_HOME="${JAVA21_HOME}"
      # always compile the java class
      "${JAVA21_HOME}/bin/javac" TestSSL.java || exit 1
      
      NATSHARED="${SHARED}"
      if [ "${SYSTEM}" = "CYGWIN" ]; then
        NATSHARED="$(cygpath -wa ${NATSHARED})"
      fi  
      TESTTRUSTSTORE="${NATSHARED}/cfg/trustStore.jks"
      local HOST="${1}"
      if [ -e "${2}" ]; then
        TESTTRUSTSTORE="${2}"
        shift 2
      elif [ -e "${3}" ]; then
        TESTTRUSTSTORE="${3}"
      fi
      
      local JAVA_OPTS="-Djavax.net.ssl.trustStore=${TESTTRUSTSTORE}"
      echo "Command: ${JAVA21_HOME}/bin/java" "${JAVA_OPTS}" TestSSL "${HOST}" "${2}"
      "${JAVA21_HOME}/bin/java" "${JAVA_OPTS}" TestSSL "${HOST}" "${2}"
    }

    # checks ressources and sets JAVA_OPTS variable before starting Java process
    prepareStart() {
      checklimits
      export LANG
      export LC_ALL="${LANG}"
      export JAVA_HOME="${JAVA21_HOME}"
      # cause A4 default paper size
      export LC_PAPER="de_CH"
      JAVA_OPTS="-server"
      if [ ! -z "${CUSTOM_HOSTFILE_PATH}" ]; then
        JAVA_OPTS="${JAVA_OPTS} -Djdk.net.hosts.file=${CUSTOM_HOSTFILE_PATH}"
      fi
      JAVA_OPTS="${JAVA_OPTS} ${MEMORY_PARAMS}"
      if [ "${SYSTEM}" = "CYGWIN" ]; then
        # on Windows user.home defaults to real home != cygwin home
        JAVA_OPTS="${JAVA_OPTS} -Duser.home=$(cygpath -w ${HOME})"
      fi
      JAVA_OPTS="${JAVA_OPTS} -Duser.language=en -Duser.region=US"
      if [ ! -z "${TZ}" ]; then
        JAVA_OPTS="${JAVA_OPTS} -Duser.timezone=${TZ}"
      fi
      JAVA_OPTS="${JAVA_OPTS} -Djava.awt.headless=true"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.rmi.dgc.client.gcInterval=3600000"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.rmi.dgc.server.gcInterval=3600000"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.net.inetaddr.ttl=60"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.net.client.defaultConnectTimeout=30000"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.net.http.allowRestrictedHeaders=true"
      # polling makes unsynchronized calls to the printing API which causes crashes
      JAVA_OPTS="${JAVA_OPTS} -Dsun.java2d.print.polling=false"
      JAVA_OPTS="${JAVA_OPTS} -Dsun.java2d.print.minRefreshTime=3600"
      JAVA_OPTS="${JAVA_OPTS} -Dfile.encoding=UTF-8"
      JAVA_OPTS="${JAVA_OPTS} -Dch.logobject.printing.impl=lp"
      # ensure non-blocking crypto and Oracle connection establishment
      if [ -e /dev/urandom ]; then
        JAVA_OPTS="${JAVA_OPTS} -Djava.security.egd=file:///dev/urandom"
      fi
      JAVA_OPTS="${JAVA_OPTS} -Dmail.mime.encodeeol.strict=true"
      if [ ! -z "${PROXY_HOST}" ]; then
        JAVA_OPTS="${JAVA_OPTS} -Dhttp.proxyHost=${PROXY_HOST} -Dhttp.proxyPort=${PROXY_PORT}"
        JAVA_OPTS="${JAVA_OPTS} -Dhttps.proxyHost=${PROXY_HOST} -Dhttps.proxyPort=${PROXY_PORT}"
        if [ ! -z "${PROXY_USER}" ]; then
          JAVA_OPTS="${JAVA_OPTS} -Dhttp.proxyUser=${PROXY_USER} -Dhttp.proxyPassword=${PROXY_PASS}"
        fi
        if [ ! -z "${PROXY_NO}" ]; then
          JAVA_OPTS="${JAVA_OPTS} -Dhttp.nonProxyHosts=${PROXY_NO}"
        fi 
      fi
      NATSHARED="${SHARED}"
      if [ "${SYSTEM}" = "CYGWIN" ]; then
        NATSHARED="$(cygpath -wa ${NATSHARED})"
      fi  
      if [ -e ${SHARED}/cfg/trustStore.jks ]; then
        # add private CA Certs and client certs to this store with keytool
        JAVA_OPTS="${JAVA_OPTS} -Djavax.net.ssl.trustStore=${NATSHARED}/cfg/trustStore.jks -Djavax.net.ssl.trustStorePassword=changeit"
      fi
      if [ -e ${SHARED}/cfg/clientStore.jks ]; then
        # add client certs to this store with keytool
        JAVA_OPTS="${JAVA_OPTS} -Djavax.net.ssl.keyStore=${NATSHARED}/cfg/clientStore.jks -Djavax.net.ssl.keyStorePassword=changeit"
      fi
      if [ -e ${SHARED}/cfg/serverStore.jks ]; then
        # add server cert to this store with keytool
        JAVA_OPTS="${JAVA_OPTS} -Djetty.keyStore=${NATSHARED}/cfg/serverStore.jks -Djetty.keyStorePassword=changeit"
      fi
      # servers expect the NetBIOS name to be set correctly
      local NETBIOSNAME=$(hostname | tr 'a-z' 'A-Z')
      JAVA_OPTS="${JAVA_OPTS} -Djcifs.netbios.hostname=${NETBIOSNAME}"
      JAVA_OPTS="${JAVA_OPTS} -Djcifs.smb.client.connTimeout=2500"
      if [ "${DEBUGGING}" = "true" ]; then
        JAVA_OPTS="${JAVA_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,address=${DEBUG_PORT},server=y,suspend=n"
      fi
      if [ "${JMX}" = "true" ]; then
        # we need this to start an MBean server, but we don't actually need network access
        JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.port=${JMX_PORT} -Dcom.sun.management.jmxremote.host=localhost"
        if [ -n "${JMX_PWFILE}" ]; then
          JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.password.file=${JMX_PWFILE}"
        else
          JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"
        fi
        JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.ssl=false"  
      fi
      unset N
      if [ ! -z ${NICE} ]; then
        N="nice -${NICE} "
      fi
      export JAVA_OPTS
      if [ -e ${VMLOG} ]; then
        mv ${VMLOG} ${VMLOG}.1
      fi
      if [ "${SYSTEM}" = "CYGWIN" ]; then
        export LOAS_PIDFILE="$(cygpath -w ${PIDFILE})"
      else 
        export LOAS_PIDFILE="${PIDFILE}"
      fi
      [ -n "${UMASK}" ] && umask "${UMASK}"
    }


    relay_signals() {
    PIDS=""
    for PID in $(pgrep -P $$); do
      PIDS="${PIDS} ${PID}"
    done
    trap "kill -PIPE ${PIDS}" PIPE
    PIDS="${PIDS} $$"
    trap "trap - HUP; kill -HUP  ${PIDS}" HUP
    trap "trap - INT; kill -INT  ${PIDS}" INT
    trap "trap - QUIT; kill -QUIT ${PIDS}" QUIT
    trap "trap - TERM; kill -TERM ${PIDS}" TERM
    }

    start() {
      prepareStart
      
      # this is to skip the loas check on single core VMs
      # else with Kubernetes we need to requests 2 CPUs for each loas
      # impractical for test environments
      # FIXME this creates various problems:
      # - a lot of thread pool sizes use this value, so it severely limits scalability if we have more than 2 CPUs
      # - if the container is configured wrong and limits the CPU to 1 then this setting can't help you and wrongly disables the sanity check
      # - therefore this setting should be removed as soon as a correct container config has been found
      echo "CAUTION: we are faking CPU count for Java to 2. This is a temporary hack and not suitable for PROD"
      JAVA_OPTS="${JAVA_OPTS} -XX:ActiveProcessorCount=2"
      echo "Prefer IPv4 Stack set to true"
      JAVA_OPTS="${JAVA_OPTS} -Djava.net.preferIPv4Stack=true"
      
      export JAVA_OPTS
      
      echo "${N}${LOAS_HOME}/bin/loas" >> ${VMLOG}
      ${N}"${LOAS_HOME}/bin/loas" >> ${VMLOG} 2>&1 &
      relay_signals

      if [ "${WATCHDOG}" = "true" ]; then
        ./watchdog start &>/dev/null &
      fi
    }

    # launch mLogistics in a Docker/Kubernetes environment
    dockerStart() {

    # create loas.properties with instance id
    INSTANCEID=$(echo "$MY_POD_NAME" | tr -dc '0-9')
    INSTANCEID=$(($INSTANCEID + 1))

    cat << EOF > ~/server/loas/conf/loas.properties
    hotdeploy.seconds=0
    jetty.port=8080
    jetty.sslport=8443
    instance.name=$(echo "$MY_POD_NAME.svc-loas")
    instance.id=$(echo "$INSTANCEID")
    EOF

      # overriding watchdog as not needed, Kubernetes/Docker is the watchdog
      WATCHDOG=false
      start
      wait ${LOAS_PID}

    }





    cli () {
      if [ -e "${CLI}" ]; then
        local PORT
        local PW
        while read l; do
          if [ -z "${PORT}" ]; then
            PORT="${l}"
          else
            PW="${l}"
          fi
        done < "${CLI}"
        local TY=$(stty -g)
        stty raw -echo
        (echo "${PW}"; cat /dev/stdin) | telnet localhost "${PORT}"
        stty "${TY}"
      else
        echo "Server not running" >&2
      fi
    }


    # main
    OWNER=mlog

    case $1 in
      start)
        start
      ;;
      
      dockerStart) 
        dockerStart
      ;; 
      
      
      testssl)
        testSSL "${2}" "${3}" "${4}"
      ;;
      
      
      cli)
        cli
      ;;
      

      *) 
        echo "Syntax: mlogistics <command>" >&2
        echo "Commands:" >&2
        echo "  start     Normal startup" >&2
        echo "  startdb   Assure the DB is running before starting the application server" >&2
        if [ "${SYSTEM}" = "CYGWIN" ]; then
          echo "  service   Startup and do not exit. Use for Windows Service" >&2
          echo "  logservice   Startup Log4J server and do not exit. Use for Windows Service" >&2
          echo "  mksvc     Register the mLogistics Windows Service" >&2
          echo "  rmsvc     Remove the mLogistics Windows Service" >&2
          echo "  mklogsvc     Register the Logserver Windows Service" >&2
          echo "  rmlogsvc     Remove the Logserver Windows Service" >&2
        fi
        echo "  debug     Start with remote debugging on port ${DEBUG_PORT}" >&2
        echo "  stop      Shutdown" >&2
        echo "  cli       Connect to server command-line interface" >&2
        echo "  kill      Force stop the application server" >&2
        echo "  testdb    Check if DB connection works" >&2
        echo "  testssl host[:port] [proxyhost[:port]] [truststore] Check cfg/trustStore.jks against https endpoints" >&2
        echo "  status    Check if this instance is running" >&2
        echo "  startlog  Start Log4J server on port ${LOG_PORT}" >&2
        echo "  stoplog   Stop logging server" >&2
        if [ ! -z "${CLUSTER_NODES}" ]; then
          echo "  cluster <c> Run c on all cluster nodes (works best with ssh-agent and ssh -A)" >&2
        fi
        echo "  log       Tail log" >&2
        exit 1
      ;;
    esac
