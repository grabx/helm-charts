# Default values for mlogistics.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

persistence:
  storageClassName: azurefile
  capacity: 5Gi

registry: 
  secretName: &secretName regcred
  # This is a special syntax used for argocd's vault plugin. you would ordiniarily put your b64 encoded credential here.
  # We however use the argocd vault plugin to load secret values from external sources
  credentials: <path:keyvault#logobject-registry-credentials>

loasfrontend:
  securityContext:
    runAsUser: 1050
  replicas: 2
  name: loasfrontend
  service:
    port: 8080
  image: 
    pullPolicy: IfNotPresent
    name: registry-int.regacloud.ch/logobject/loas
    tag: "4.1.9"
  resources: 
    requests:
      memory: 256Mi
    limits:
      memory: 3Gi
  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: azure/application-gateway
      cert-manager.io/cluster-issuer: regacloud-letsencrypt-prod
      appgw.ingress.kubernetes.io/health-probe-path: /mlogstatus/ping.html
      appgw.ingress.kubernetes.io/use-private-ip: "true"
    hosts:
      - host: sanoone-int.regacloud.ch
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: 
    - hosts:
      - sanoone-int.regacloud.ch
      secretName: sanoone


loastimer:
  enabled: false
  name: loastimer
  service:
    port: 8080
  image: 
    pullPolicy: IfNotPresent
    name: registry-int.regacloud.ch/logobject/loas
    tag: "4.1.9"

lodelivery:
  name: lodelivery
  securityContext:
    runAsUser: 1050
  service:
    port: 9080
  resources: 
    requests:
      memory: 32Mi
    limits:
      memory: 1Gi
  image: 
    pullPolicy: IfNotPresent
    name: registry-int.regacloud.ch/logobject/lodelivery
    tag: "1.3.6"


lodoc:
  name: lodoc
  service:
    port: 9080
  resources: 
    requests:
      memory: 256Mi
    limits:
      memory: 1Gi
  image: 
    pullPolicy: IfNotPresent
    name: registry-int.regacloud.ch/logobject/lodoc
    tag: "2.6.10"


lotools:
  name: lotools
  resources: 
    requests:
      memory: 32Mi
    limits:
      memory: 64Mi
  image: 
    pullPolicy: IfNotPresent
    name: registry-int.regacloud.ch/logobject/lotools
    tag: "1.24.1"

logserver:
  name: logserver
  service:
    port: 8010
  resources: 
    requests:
      memory: 32Mi
    limits:
      memory: 128Mi
  main:
    image:
      pullPolicy: IfNotPresent
      name: registry-int.regacloud.ch/logobject/logserver
      tag: "1.1.1"
  sidecar:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      name: registry-int.regacloud.ch/logobject/logsidecar
      tag: "1.0.16"

azure:
  dnsWorkaround:
    enabled: true
    customDomain: regaint
    cronJob:
      resources:
        requests:
          memory: 32Mi
        limits:
          memory: 128Mi

monitoring:
  name: logobject
  prometheusLabel: 
    release: kube-prometheus-stack
  smtpValue: <path:keyvault#mandrill-password>
  enabled: true
  alerts:
    group: SanoOne
    rules:
    - alert: (INT) SanoOne Unhealthy
      annotations:
        description: SanoOne health check has failed
        summary: SanoOne Unhealthy
      expr: probe_http_status_code{target="sanoone-int-health"} != 200
      for: 5m
      labels:
        severity: warning
    - alert: (INT) SanoOne Shared Volume Warning
      annotations:
        summary: PersistentVolumeClaim {{ $labels.persistentvolumeclaim }} is over 80% used
        description: The PVC {{ $labels.persistentvolumeclaim }} in namespace {{ $labels.namespace }} is using more than 80% but less than 90% of its capacity. Consider expanding or cleaning up storage.
      expr: | 
        (1 - (max(kubelet_volume_stats_available_bytes{persistentvolumeclaim="mlogistics-shared"}) by (namespace, persistentvolumeclaim) / max(kubelet_volume_stats_capacity_bytes{persistentvolumeclaim="mlogistics-shared"}) by (namespace, persistentvolumeclaim))) * 100 > 80 < 95
      for: 5m
      labels:
        severity: warning
    - alert: (INT) SanoOne Shared Volume Critical
      annotations:
        summary: PersistentVolumeClaim {{ $labels.persistentvolumeclaim }} is over 95% used
        description: The PVC {{ $labels.persistentvolumeclaim }} in namespace {{ $labels.namespace }} is using more than 90% of its capacity. Consider expanding or cleaning up storage.
      expr: | 
        (1 - (max(kubelet_volume_stats_available_bytes{persistentvolumeclaim="mlogistics-shared"}) by (namespace, persistentvolumeclaim) / max(kubelet_volume_stats_capacity_bytes{persistentvolumeclaim="mlogistics-shared"}) by (namespace, persistentvolumeclaim))) * 100 > 95
      for: 5m
      labels:
        severity: critical
  receivers:
  - name: 'logobject'
    emailConfigs:
    - authUsername: 'Schweizerische Rettungsflugwacht Rega'
      authPassword:
        name: logobject
        key: password
      from: Rega SanoOne Int Alerting <kubernetesalerting@rega.ch>>
      smarthost: smtp.mandrillapp.com:587
      to: 'rega-sanoone.support@logobject.ch, admin@0x01.host, kevin.christen@grabx.ch'
      hello: localhost
      requireTLS: true
      sendResolved: true

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: *secretName
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: 
  maintainer.rega.ch/company: mlogistics
  maintainer.rega.ch/team: grabx
  product.rega.ch/name: logobject
  maintainer.rega.ch/email: support_at_grabx.ch


podSecurityContext:
  fsGroup: 1050
  allowPrivilegeEscalation: false
  runAsNonRoot: true

securityContext:
  runAsUser: 1050
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  #readOnlyRootFilesystem: true
  # capabilities:
  #   drop:
  #   - ALL

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  suffix: rega

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: shared
#   persistencVolumeClaim:
#     claimName: shared
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
